on:
  workflow_dispatch:
  push:
    # Run when commits are pushed to mainline branch (main or master)
    # Set this to the mainline branch you are using
    branches:
      - main
      - master

# GitHub Actions workflow to deploy to Azure using azd
# To configure required secrets for connecting to Azure, simply run `azd pipeline config`

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install azd
        run: |
          # Install Azure Developer CLI with retry logic
          for i in {1..3}; do
            echo "Attempt $i: Installing Azure Developer CLI..."
            if curl -fsSL https://aka.ms/install-azd.sh | bash; then
              echo "Azure Developer CLI installed successfully"
              break
            else
              echo "Installation failed, attempt $i of 3"
              if [ $i -eq 3 ]; then
                echo "Failed to install Azure Developer CLI after 3 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
        env:
          AZURE_DEV_COLLECT_TELEMETRY: 'no'

      - name: Log in with Azure (Federated Credentials)
        if: ${{ env.AZURE_CLIENT_ID != '' }}
        run: |
          echo "Logging in with Federated Credentials..."
          echo "Client ID: $AZURE_CLIENT_ID"
          echo "Tenant ID: $AZURE_TENANT_ID"
          azd auth login \
            --client-id "$AZURE_CLIENT_ID" \
            --federated-credential-provider "github" \
            --tenant-id "$AZURE_TENANT_ID"
        shell: bash

      - name: Log in with Azure (Client Credentials)
        if: ${{ env.AZURE_CREDENTIALS != '' }}
        run: |
          CLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.clientId')
          CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r '.clientSecret')
          TENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.tenantId')
          
          echo "::add-mask::$CLIENT_SECRET"
          
          azd auth login \
            --client-id "$CLIENT_ID" \
            --client-secret "$CLIENT_SECRET" \
            --tenant-id "$TENANT_ID"
        shell: bash
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Provision Infrastructure
        run: |
          echo "Starting infrastructure provisioning..."
          echo "Environment: $AZURE_ENV_NAME"
          echo "Location: $AZURE_LOCATION"
          azd provision --no-prompt
        env:
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Application
        run: |
          echo "Starting application deployment..."
          echo "Environment: $AZURE_ENV_NAME"
          azd deploy --no-prompt
        env:
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}